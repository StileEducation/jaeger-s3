// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/johanneswuerbach/jaeger-s3/plugin/s3spanstore (interfaces: AthenaAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	athena "github.com/aws/aws-sdk-go-v2/service/athena"
	gomock "github.com/golang/mock/gomock"
)

// MockAthenaAPI is a mock of AthenaAPI interface.
type MockAthenaAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAthenaAPIMockRecorder
}

// MockAthenaAPIMockRecorder is the mock recorder for MockAthenaAPI.
type MockAthenaAPIMockRecorder struct {
	mock *MockAthenaAPI
}

// NewMockAthenaAPI creates a new mock instance.
func NewMockAthenaAPI(ctrl *gomock.Controller) *MockAthenaAPI {
	mock := &MockAthenaAPI{ctrl: ctrl}
	mock.recorder = &MockAthenaAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAthenaAPI) EXPECT() *MockAthenaAPIMockRecorder {
	return m.recorder
}

// BatchGetQueryExecution mocks base method.
func (m *MockAthenaAPI) BatchGetQueryExecution(arg0 context.Context, arg1 *athena.BatchGetQueryExecutionInput, arg2 ...func(*athena.Options)) (*athena.BatchGetQueryExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetQueryExecution", varargs...)
	ret0, _ := ret[0].(*athena.BatchGetQueryExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetQueryExecution indicates an expected call of BatchGetQueryExecution.
func (mr *MockAthenaAPIMockRecorder) BatchGetQueryExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetQueryExecution", reflect.TypeOf((*MockAthenaAPI)(nil).BatchGetQueryExecution), varargs...)
}

// GetQueryExecution mocks base method.
func (m *MockAthenaAPI) GetQueryExecution(arg0 context.Context, arg1 *athena.GetQueryExecutionInput, arg2 ...func(*athena.Options)) (*athena.GetQueryExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueryExecution", varargs...)
	ret0, _ := ret[0].(*athena.GetQueryExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryExecution indicates an expected call of GetQueryExecution.
func (mr *MockAthenaAPIMockRecorder) GetQueryExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryExecution", reflect.TypeOf((*MockAthenaAPI)(nil).GetQueryExecution), varargs...)
}

// GetQueryResults mocks base method.
func (m *MockAthenaAPI) GetQueryResults(arg0 context.Context, arg1 *athena.GetQueryResultsInput, arg2 ...func(*athena.Options)) (*athena.GetQueryResultsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueryResults", varargs...)
	ret0, _ := ret[0].(*athena.GetQueryResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryResults indicates an expected call of GetQueryResults.
func (mr *MockAthenaAPIMockRecorder) GetQueryResults(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryResults", reflect.TypeOf((*MockAthenaAPI)(nil).GetQueryResults), varargs...)
}

// ListQueryExecutions mocks base method.
func (m *MockAthenaAPI) ListQueryExecutions(arg0 context.Context, arg1 *athena.ListQueryExecutionsInput, arg2 ...func(*athena.Options)) (*athena.ListQueryExecutionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListQueryExecutions", varargs...)
	ret0, _ := ret[0].(*athena.ListQueryExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueryExecutions indicates an expected call of ListQueryExecutions.
func (mr *MockAthenaAPIMockRecorder) ListQueryExecutions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueryExecutions", reflect.TypeOf((*MockAthenaAPI)(nil).ListQueryExecutions), varargs...)
}

// StartQueryExecution mocks base method.
func (m *MockAthenaAPI) StartQueryExecution(arg0 context.Context, arg1 *athena.StartQueryExecutionInput, arg2 ...func(*athena.Options)) (*athena.StartQueryExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartQueryExecution", varargs...)
	ret0, _ := ret[0].(*athena.StartQueryExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartQueryExecution indicates an expected call of StartQueryExecution.
func (mr *MockAthenaAPIMockRecorder) StartQueryExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartQueryExecution", reflect.TypeOf((*MockAthenaAPI)(nil).StartQueryExecution), varargs...)
}

// StopQueryExecution mocks base method.
func (m *MockAthenaAPI) StopQueryExecution(arg0 context.Context, arg1 *athena.StopQueryExecutionInput, arg2 ...func(*athena.Options)) (*athena.StopQueryExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopQueryExecution", varargs...)
	ret0, _ := ret[0].(*athena.StopQueryExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopQueryExecution indicates an expected call of StopQueryExecution.
func (mr *MockAthenaAPIMockRecorder) StopQueryExecution(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopQueryExecution", reflect.TypeOf((*MockAthenaAPI)(nil).StopQueryExecution), varargs...)
}
